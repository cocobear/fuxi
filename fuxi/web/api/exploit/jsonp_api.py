#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author  : jeffzhang
# @Time    : 2019/7/9
# @File    : jsonp.py
# @Desc    : ""

from flask import request, session
from flask_restful import Resource, reqparse
from fuxi.core.databases.orm.exploit.jsonp_orm import DBExploitJsonpTask, DBExploitJsonpRes
from fuxi.common.utils.logger import logger
from fuxi.core.auth.token import auth
from fuxi.common.utils.time_format import timestamp_to_str
from fuxi.core.data.response import Response


parser = reqparse.RequestParser()
parser.add_argument('name', type=str)
parser.add_argument('url', type=str)
parser.add_argument('d', type=str)
parser.add_argument('link', type=str)
parser.add_argument('keyword', type=str)


class JsonpTasksV1(Resource):
    @auth
    def get(self):
        data = []
        try:
            items = DBExploitJsonpTask.get_list()
            for item in items:
                count = DBExploitJsonpRes.get_count({"tid": str(item['_id'])})
                tmp_data = {
                    "tid": str(item['_id']),
                    "sid": item['short_id'],
                    'name': item['name'],
                    'target': item['target'],
                    'date': timestamp_to_str(item['date']),
                    'count': count,
                    'op': item['op']
                }
                data.append(tmp_data)
            return Response.success(data=data)
        except Exception as e:
            msg = "get jsonp hijacking task list failed: {}".format(e)
            logger.warning(msg)
            return Response.failed(data=data, message=msg)

    @auth
    def post(self):
        try:
            op = session.get('user')
            args = parser.parse_args()
            name = args['name'].strip()
            url = args['url'].strip()
            tid = DBExploitJsonpTask.add(name=name, url=url, op=op)
            logger.success("{} created the jsonp hijacker task: {}".format(op, tid))
            return Response.success(message="The task was created successfully")
        except Exception as e:
            msg = "created the jsonp hijacker task failed: {}".format(e)
            logger.warning(msg)
            return Response.failed(message=msg)


class JsonpTaskManageV1(Resource):
    @auth
    def delete(self, tid):
        try:
            op = session.get('user')
            DBExploitJsonpTask.delete_by_id(tid)
            logger.info("{} deleted the jsonp hijacker task: {}".format(op, tid))
            return Response.success(message="The task was deleted successfully")
        except Exception as e:
            msg = "deleted the jsonp hijacker task failed: {}".format(e)
            logger.warning(msg)
            return Response.failed(message=msg)


class JsonpTaskResListV1(Resource):
    @auth
    def get(self, tid):
        # 现阶段数据从库里全部读出来 返回到前端 如果数据很大 接口返回会很慢 后期这个接口最好做成分页查询
        data = []
        try:
            args = parser.parse_args()
            keyword = args['keyword']
            task_info = DBExploitJsonpTask.find_by_id(tid)
            if not task_info:
                return Response.failed("can not found this task")
            if not keyword:
                items = DBExploitJsonpRes.get_list_by_tid(tid).sort("date", -1)
            else:
                items = DBExploitJsonpRes.filter_task_res_by_keyword(tid, keyword).sort("date", -1)
            for item in items:
                tmp_data = {
                    "task_name": task_info['name'],
                    "target": task_info['target'],
                    "tid": tid,
                    "rid": str(item['_id']),
                    'data': item['data'],
                    'ip': item['ip'],
                    'date': timestamp_to_str(item['date']),
                }
                data.append(tmp_data)
            return Response.success(data=data)
        except Exception as e:
            msg = "get jsonp hijacking result failed: {}".format(e)
            logger.warning(msg)
            return Response.failed(data=data, message=msg)


class JsonpResListV1(Resource):
    @auth
    def get(self):
        data = []
        try:
            items = DBExploitJsonpRes.get_list()
            for item in items:
                task_info = DBExploitJsonpTask.find_by_id(item['tid'])
                if not task_info:
                    continue
                tmp_data = {
                    "task_name": task_info['name'],
                    "target": task_info['target'],
                    "tid": item['tid'],
                    "rid": str(item['_id']),
                    'data': item['data'],
                    'ip': item['ip'],
                    'date': timestamp_to_str(item['date']),
                }
                data.append(tmp_data)
            return Response.success(data=data)
        except Exception as e:
            msg = "get jsonp hijacking result failed: {}".format(e)
            logger.warning(msg)
            return Response.failed(data=data, message=msg)


class JsonpResManageV1(Resource):
    @auth
    def delete(self, rid):
        try:
            op = session.get('user')
            DBExploitJsonpRes.delete_by_id(rid)
            logger.info("{} delete jsonp result: {}".format(op, rid))
            return Response.success(message="删除成功")
        except Exception as e:
            msg = "delete jsonp result failed: {}".format(e)
            logger.warning(msg)
            return Response.failed(message=msg)


class JsonDataReceiveV1(Resource):
    @staticmethod
    def post():
        """
        POST /api/v1/exploit/jsonp/data
        :return:
        """
        try:
            args = parser.parse_args()
            res = args['d']
            source = args['link']
            short_id = source.replace("#/", "").split('/')[-1][:5]
            ip = request.remote_addr
            referrer = request.referrer
            task_data = DBExploitJsonpTask.get_detail_by_short_id(short_id)
            if not task_data:
                return Response.failed()
            DBExploitJsonpRes.add(
                tid=str(task_data['_id']), data=res, op=task_data['op'],
                ip=ip, referrer=referrer
            )
            logger.success("receive phishing data: {}".format(short_id))
            return Response.success()
        except Exception as e:
            logger.warning("receive phishing data failed: {}".format(e))
            return Response.success()

